---
// src/components/ContactForm.astro
---
<div class="contact-form-container">
  <form class="contact-form" id="contactForm">
    <div class="form-status" id="formStatus" style="display: none;"></div>
    
    <div>
      <label for="name">Name*</label>
      <input 
        type="text" 
        id="name" 
        name="name" 
        required 
        maxlength="100"
        autocomplete="name"
        pattern="[A-Za-z\s\-'.]+"
        title="Name should only contain letters, spaces, hyphens, apostrophes, and periods"
      />
      <div class="field-error" id="nameError"></div>
    </div>
    
    <div>
      <label for="email">Email*</label>
      <input 
        type="email" 
        id="email" 
        name="email" 
        required 
        maxlength="254"
        autocomplete="email"
      />
      <div class="field-error" id="emailError"></div>
    </div>
    
    <div>
      <label for="message">Message*</label>
      <textarea 
        id="message" 
        name="message" 
        rows="5" 
        required 
        maxlength="5000"
        placeholder="Tell us how we can help you..."
      ></textarea>
      <div class="character-count">
        <span id="messageCount">0</span>/5000 characters
      </div>
      <div class="field-error" id="messageError"></div>
    </div>
    
    <button type="submit" id="submitButton">
      <span id="submitText">Send Message</span>
      <span id="submitSpinner" style="display: none;">Sending...</span>
    </button>
  </form>
</div>

<script>
(function() {
  'use strict';
  
  const form = document.getElementById('contactForm') as HTMLFormElement;
  const statusDiv = document.getElementById('formStatus') as HTMLElement;
  const submitButton = document.getElementById('submitButton') as HTMLButtonElement;
  const submitText = document.getElementById('submitText') as HTMLElement;
  const submitSpinner = document.getElementById('submitSpinner') as HTMLElement;
  const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
  const messageCount = document.getElementById('messageCount') as HTMLElement;

  // Character counter for message
  function updateCharacterCount() {
    const currentLength = messageTextarea.value.length;
    messageCount.textContent = currentLength.toString();
    
    if (currentLength > 4800) {
      messageCount.style.color = '#ef4444'; // Red warning
    } else {
      messageCount.style.color = '#6b7280'; // Gray normal
    }
  }

  messageTextarea.addEventListener('input', updateCharacterCount);

  // Clear field errors
  function clearFieldError(fieldId: string) {
    const errorDiv = document.getElementById(fieldId + 'Error') as HTMLElement;
    if (errorDiv) {
      errorDiv.textContent = '';
      errorDiv.style.display = 'none';
    }
  }

  // Show field error
  function showFieldError(fieldId: string, message: string) {
    const errorDiv = document.getElementById(fieldId + 'Error') as HTMLElement;
    if (errorDiv) {
      errorDiv.textContent = message;
      errorDiv.style.display = 'block';
    }
  }

  // Show status message
  function showStatus(message: string, isError: boolean = false) {
    statusDiv.textContent = message;
    statusDiv.className = 'form-status ' + (isError ? 'error' : 'success');
    statusDiv.style.display = 'block';
    statusDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  }

  // Client-side validation
  function validateForm(formData: FormData): { isValid: boolean; errors: Record<string, string> } {
    const errors: Record<string, string> = {};
    
    const name = (formData.get('name') as string)?.trim();
    const email = (formData.get('email') as string)?.trim();
    const message = (formData.get('message') as string)?.trim();

    // Validate name
    if (!name) {
      errors.name = 'Name is required';
    } else if (name.length > 100) {
      errors.name = 'Name cannot exceed 100 characters';
    } else if (!/^[A-Za-z\s\-'.]+$/.test(name)) {
      errors.name = 'Name contains invalid characters';
    }

    // Validate email
    if (!email) {
      errors.email = 'Email is required';
    } else if (email.length > 254) {
      errors.email = 'Email cannot exceed 254 characters';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      errors.email = 'Please enter a valid email address';
    }

    // Validate message
    if (!message) {
      errors.message = 'Message is required';
    } else if (message.length > 5000) {
      errors.message = 'Message cannot exceed 5000 characters';
    } else if (message.length < 10) {
      errors.message = 'Message must be at least 10 characters long';
    }

    return { isValid: Object.keys(errors).length === 0, errors };
  }

  // Set form loading state
  function setFormLoading(isLoading: boolean) {
    submitButton.disabled = isLoading;
    
    if (isLoading) {
      submitText.style.display = 'none';
      submitSpinner.style.display = 'inline';
    } else {
      submitText.style.display = 'inline';
      submitSpinner.style.display = 'none';
    }
  }

  // Handle form submission
  async function handleSubmit(event: Event) {
    event.preventDefault();
    
    // Clear previous errors and status
    ['name', 'email', 'message'].forEach(clearFieldError);
    statusDiv.style.display = 'none';
    
    const formData = new FormData(form);
    
    // Client-side validation
    const validation = validateForm(formData);
    if (!validation.isValid) {
      Object.entries(validation.errors).forEach(([field, message]) => {
        showFieldError(field, message);
      });
      return;
    }

    setFormLoading(true);

    try {
      // Prepare data for API
      const requestData = {
        name: (formData.get('name') as string).trim(),
        email: (formData.get('email') as string).trim(),
        message: (formData.get('message') as string).trim()
      };

      // Submit to API
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(requestData)
      });

      const result = await response.json();

      if (response.ok && result.success) {
        showStatus(result.message || 'Your message has been sent successfully!');
        form.reset();
        updateCharacterCount();
      } else {
        // Handle API errors
        if (result.details && Array.isArray(result.details)) {
          // Show field-specific errors if available
          result.details.forEach((error: string) => {
            if (error.toLowerCase().includes('name')) {
              showFieldError('name', error);
            } else if (error.toLowerCase().includes('email')) {
              showFieldError('email', error);
            } else if (error.toLowerCase().includes('message')) {
              showFieldError('message', error);
            }
          });
        } else {
          showStatus(result.error || 'Failed to send message. Please try again.', true);
        }
      }
    } catch (error) {
      console.error('Form submission error:', error);
      showStatus('Network error. Please check your connection and try again.', true);
    } finally {
      setFormLoading(false);
    }
  }

  // Attach event listener
  form.addEventListener('submit', handleSubmit);

  // Initialize character count
  updateCharacterCount();
})();
</script>

<style>
  .contact-form-container {
    max-width: 500px;
    margin: 0 auto;
  }

  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .contact-form > div {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .contact-form label {
    font-weight: bold;
    color: var(--color-text, #333);
  }

  .contact-form input,
  .contact-form textarea {
    padding: 0.75rem;
    border: 2px solid #e5e7eb;
    border-radius: 6px;
    font-size: 16px;
    transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }

  .contact-form input:focus,
  .contact-form textarea:focus {
    outline: none;
    border-color: var(--color-accent-600, #2563eb);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
  }

  .contact-form input:invalid,
  .contact-form textarea:invalid {
    border-color: #ef4444;
  }

  .contact-form textarea {
    resize: vertical;
    min-height: 120px;
    font-family: inherit;
  }

  .character-count {
    font-size: 0.875rem;
    text-align: right;
    color: #6b7280;
    margin-top: -0.25rem;
  }

  .field-error {
    color: #ef4444;
    font-size: 0.875rem;
    display: none;
    margin-top: 0.25rem;
  }

  .form-status {
    padding: 0.75rem 1rem;
    border-radius: 6px;
    font-weight: 500;
    margin-bottom: 1rem;
  }

  .form-status.success {
    background-color: #dcfce7;
    color: #166534;
    border: 1px solid #bbf7d0;
  }

  .form-status.error {
    background-color: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  .contact-form button {
    padding: 0.875rem 1.5rem;
    background-color: var(--color-accent-600, #2563eb);
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 600;
    transition: background-color 0.2s ease-in-out, transform 0.1s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .contact-form button:hover:not(:disabled) {
    background-color: var(--color-accent-700, #1d4ed8);
    transform: translateY(-1px);
  }

  .contact-form button:active:not(:disabled) {
    transform: translateY(0);
  }

  .contact-form button:disabled {
    background-color: #9ca3af;
    cursor: not-allowed;
    transform: none;
  }

  .contact-form button:disabled:hover {
    background-color: #9ca3af;
  }

  /* Loading spinner */
  #submitSpinner::after {
    content: "";
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    display: inline-block;
    margin-left: 0.5rem;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .contact-form input,
    .contact-form textarea {
      background-color: var(--color-gray-800, #1f2937);
      border-color: var(--color-gray-600, #4b5563);
      color: var(--color-text, #f9fafb);
    }

    .contact-form input:focus,
    .contact-form textarea:focus {
      border-color: var(--color-accent-400, #60a5fa);
      box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.1);
    }

    .form-status.success {
      background-color: rgba(34, 197, 94, 0.1);
      color: #4ade80;
      border-color: rgba(34, 197, 94, 0.3);
    }

    .form-status.error {
      background-color: rgba(239, 68, 68, 0.1);
      color: #f87171;
      border-color: rgba(239, 68, 68, 0.3);
    }
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .contact-form-container {
      margin: 0 1rem;
    }

    .contact-form input,
    .contact-form textarea,
    .contact-form button {
      font-size: 16px; /* Prevents zoom on iOS */
    }
  }
</style>
